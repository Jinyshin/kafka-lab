# Kafka 클릭 로그 처리 실습 환경
# 실행: docker-compose up -d
# 종료: docker-compose down

name: kafka-lab

services:
  # Apache Zookeeper: Kafka 클러스터의 메타데이터 관리
  # - Kafka 브로커들의 설정 정보 저장
  # - 토픽, 파티션, Consumer Group 정보 관리
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"  # Zookeeper 클라이언트 포트
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181  # 클라이언트 연결 포트
      ZOOKEEPER_TICK_TIME: 2000    # 기본 시간 단위 (ms)
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data  # 데이터 영구 저장
      - zookeeper-logs:/var/lib/zookeeper/log   # 로그 영구 저장
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]  # 서비스 상태 확인
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Kafka 브로커: 메시지 저장 및 전송 담당
  # - 토픽의 파티션에 메시지 저장
  # - Producer로부터 메시지 수신, Consumer에게 메시지 전송
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy  # Zookeeper가 준비될 때까지 대기
    ports:
      - "9092:9092"  # 외부 클라이언트 연결 포트 (Producer/Consumer)
      - "9101:9101"  # JMX 모니터링 포트
    environment:
      KAFKA_BROKER_ID: 1  # 브로커 고유 ID
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'  # Zookeeper 연결 정보
      
      # 리스너 설정: 클라이언트 연결 방식 정의
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      
      # 개발 환경용 설정 (단일 브로커)
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1      # Consumer 오프셋 토픽 복제 수
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1          # 트랜잭션 로그 최소 ISR
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0       # Consumer Group 리밸런싱 지연 없음
      
      # 모니터링 및 관리 설정
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      
      # 실습용 편의 설정
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'   # 토픽 자동 생성 허용
      KAFKA_DELETE_TOPIC_ENABLE: 'true'         # 토픽 삭제 허용
    volumes:
      - kafka-data:/var/lib/kafka/data  # 메시지 데이터 영구 저장
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI: 웹 기반 Kafka 관리 도구
  # - 토픽, 메시지, Consumer Group 시각화
  # - 브라우저에서 http://localhost:8080 접속
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy  # Kafka가 준비될 때까지 대기
    ports:
      - "8080:8080"  # 웹 UI 접속 포트
    environment:
      KAFKA_CLUSTERS_0_NAME: local                       # 클러스터 이름
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092     # Kafka 브로커 주소
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181         # Zookeeper 주소
    restart: unless-stopped  # 컨테이너 자동 재시작

# Docker 볼륨: 컨테이너 재시작 시에도 데이터 보존
volumes:
  zookeeper-data:  # Zookeeper 데이터
  zookeeper-logs:  # Zookeeper 로그
  kafka-data:      # Kafka 메시지 데이터